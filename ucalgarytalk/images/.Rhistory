theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),
axis.text.y = element_blank(), axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
panel.border = element_blank()) +
labs(y='\n', x='\n')
g <- ggplot(dat_m, aes(x = abs(lat__), y = schangeriiarm)) +
theme_bw(base_size=16) +
geom_point(alpha = 0.8, position = position) +
geom_point(aes(size = wtcvstar_RIIarm), alpha = 1, position = position) +
#   geom_smooth(method = "lm", se = TRUE, colour='black', size=1.5) +
geom_smooth(method = "glm", family = "binomial", formula = y ~ x + I(x^2), se = TRUE, colour='black', size=1.5, aes(weight = wtcvstar_RIIarm)) +
scale_y_continuous(limits=c(-0.05,1.05), breaks=c(0,1)) +
scale_x_continuous(limits=c(0,80)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor=element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
labs(y = "\n", x = "\n")
h <- ggplot(dat_m[dat_m$schangeriiarm==0,], aes(x = abs(lat__))) +
theme_bw(base_size=16) +
geom_histogram(fill = "grey", binwidth=2) +
scale_y_continuous(limits=c(0,35)) +
scale_x_continuous(limits=c(0,80)) +
theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),
axis.text.y = element_blank(), axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
panel.border = element_blank()) +
labs(y='\n', x='\n')
i <- ggplot(dat_m[dat_m$schangeriiarm==1,], aes(abs(lat__))) +
theme_bw(base_size=16) +
geom_histogram(fill = "grey", binwidth=2) +
scale_y_continuous(trans='reverse', limits=c(35,0)) +
scale_x_continuous(limits=c(0,80)) +
theme(panel.grid.major = element_blank(),panel.grid.minor=element_blank(),
axis.text.y = element_blank(), axis.text.x = element_blank(),
axis.ticks = element_blank(),
plot.background = element_blank(),
panel.background = element_blank(),
panel.border = element_blank()) +
labs(y='\n', x='\n')
grid.newpage()
vpa_ <- viewport(width = 1, height = 0.9, x = 0.5, y = 0.5)
vpb_ <- viewport(width = 1, height = 0.9, x = 0.5, y = 0.5)
vpc_ <- viewport(width = 1, height = 0.9, x = 0.5, y = 0.5)
print(h, vp = vpb_)
print(i, vp = vpc_)
print(g + theme(axis.text.x = element_text(), text = element_text(size=20)), vp = vpa_)
grid.text("Absolute latitude", x = 0.53, y = 0.1, gp=gpar(cex = 1.2))
grid.text("Probability of interaction outcome sign change", x = 0.04, y = 0.5, rot=90, gp=gpar(cex = 1.2))
grid.text(expression(paste(bold(Linear), " < 0.0001    ", bold(Quadratic), " < 0.0001")), x = 0.25, y = 0.96, gp=gpar(cex = 1))
setwd("/Users/ScottMac/github/SChamberlain/posterstalks/ucalgarytalk/images")
grid.newpage()
vpa_ <- viewport(width = 1, height = 0.9, x = 0.5, y = 0.5)
vpb_ <- viewport(width = 1, height = 0.9, x = 0.5, y = 0.5)
vpc_ <- viewport(width = 1, height = 0.9, x = 0.5, y = 0.5)
print(e, vp = vpb_)
print(f, vp = vpc_)
print(d + theme(axis.text.x = element_text(), text = element_text(size=20)), vp = vpa_)
grid.text("Absolute latitude", x = 0.53, y = 0.1, gp=gpar(cex = 1.2))
grid.text("Probability of interaction outcome sign change", x = 0.04, y = 0.5, rot=90, gp=gpar(cex = 1.2))
grid.text(expression(paste(bold(Linear), " < 0.0159    ", bold(Quadratic), " = 0.7554")), x = 0.25, y = 0.96, gp=gpar(cex = 1))
rm(list=ls())
install_github('taxize_', 'ropensci')
library(taxize)
classification(get_uid(c("Chironomus riparius", "aaa vva")))
library(XML)
classification
taxize:::classification
taxize::classification
classification(get_uid(c("Chironomus riparius", "aaa vva")))
library(taxize); library(XML); require(RCurl)
classification(get_uid(c("Chironomus riparius", "aaa vva")))
classification(get_tsn(c("Quercus", "Pinus")))
classification(get_tsn(c("Quercus", "Pinus"), 'sciname'))
classification(get_tsn(c("Quercus robur", "Pinus contorta"), 'sciname'))
classification(get_tsn(c("Ditrichum schimperi", "Drosophila melanogaster", "Homo sapiens"), 'sciname'))
classification(get_tsn(c("Pan troglodytes", "Drosophila melanogaster", "Homo sapiens"), 'sciname'))
source('~/.active-rstudio-document', echo=TRUE)
temp <- classification(get_tsn(c("Pan troglodytes", "Drosophila melanogaster", "Homo sapiens"), 'sciname'))
temp[[1]][nrow(temp[[1]]),"taxon"]
llply(temp, function(x) data.frame(x, target = rep(x[nrow(x),"taxon"], nrow(x))))
ldply(temp, function(x) data.frame(x, target = rep(x[nrow(x),"taxon"], nrow(x))))
temp2 <- ldply(temp, function(x) data.frame(x, target = rep(x[nrow(x),"taxon"], nrow(x))))
temp2[order(temp2$taxon)]
temp2[order(temp2$taxon),]
temp
library(reshape2)
library(reshape)
merge_all(temp)
sapply(temp, nrow)
temp[order(sapply(temp, nrow))]
temp[order(sapply(temp, nrow), decreasing=F), ]
temp[order(sapply(temp, nrow, decreasing=F)), ]
temp[order(sapply(temp, nrow), decreasing=F), ]
temp[order(sapply(temp, nrow), decreasing=FALSE), ]
temp[order(sapply(temp, nrow), decreasing=TRUE), ]
temp[order(sapply(temp, nrow)), ]
temp[order(sapply(temp, nrow), decreasing=F)]
temp[order(sapply(temp, nrow), decreasing=T)]
merge_all(temp[order(sapply(temp, nrow), decreasing=T)])
merge_all(temp2[order(sapply(temp2, nrow), decreasing=T)])
temp2 <- llply(temp, function(x) data.frame(x, target = rep(x[nrow(x),"taxon"], nrow(x))))
temp2
merge_all(temp2[order(sapply(temp2, nrow), decreasing=T)])
do.call(merge, temp2[order(sapply(temp2, nrow), decreasing=T)])
temp2[order(sapply(temp2, nrow), decreasing=T)]
do.call(merge, temp2)
do.call(merge_all, temp2)
do.call(cbind, temp2)
temp2 <- ldply(temp, function(x) data.frame(x, target = rep(x[nrow(x),"taxon"], nrow(x))))
temp2[order(temp2$taxon), ]
temp2
temp2[order(temp2$taxon), ]
library(vegan)
install.packages("vegan")
?rda
temp2[order(temp2$taxon), ]
mm <- temp2[order(temp2$taxon), ]
split(mm, mm$rank)
nn <- split(mm, mm$rank)
temp2
unique(temp2$target)
length(unique(temp2$target))
nn
sapply(nn, nrow)
mm
nn
temp2
nn
mm
laply(mm, .(taxon), summarise, length(unique(taxon)))
laply(mm, .(taxon), length(unique(taxon)))
laply(mm, function(x) length(unique(taxon)))
laply(mm$taxon, function(x) length(unique(x)))
ldply(mm, .(taxon), summarise, length(unique(taxon)))
ddply(mm, .(taxon), summarise, length(unique(taxon)))
ddply(mm, .(taxon), summarise, length(taxon))
summ <- ddply(mm, .(taxon), summarise, length(taxon))
summ[summ$..1 == 1, "taxon"]
mm
mm[mm$taxon summ[summ$..1 == 1, "taxon"], ] # remove taxa that aren't informative (n = 1)
mm[mm$taxon %in% summ[summ$..1 == 1, "taxon"], ] # remove taxa that aren't informative (n = 1)
mm[!mm$taxon %in% summ[summ$..1 == 1, "taxon"], ] # remove taxa that aren't informative (n = 1)
mm[!mm$taxon %in% summ[summ$..1 == 1, "taxon"], ] # remove taxa that aren't informative (n = 1)
nn <- mm[!mm$taxon %in% summ[summ$..1 == 1, "taxon"], ] # remove taxa that aren't informative (n = 1)
summ
temp
length(temp)
summ[summ$..1 == length(temp)]
summ[summ$..1 == length(temp), "taxon"]
nn[nn$taxon %in% summ[summ$..1 == length(temp), "taxon"], ] # remove the taxon that is in all taxa
nn[!nn$taxon %in% summ[summ$..1 == length(temp), "taxon"], ] # remove the taxon that is in all taxa
oo <- nn[!nn$taxon %in% summ[summ$..1 == length(temp), "taxon"], ] # remove the taxon that is in all taxa
temp
temp2
temp2
temp2[order(temp2$rank), ]
library(ritis)
help(package="ritis")
getranknames()
rankorder <- getranknames()
rankorder
rankorder <- getranknames()[,-1]
rankorder
merge(temp2, rankorder, "rank", "rankName")
merge(temp2, rankorder, by.x="rank", by.xy"rankName")
merge(temp2, rankorder, by.x="rank", by.xy="rankName")
merge(temp2, rankorder, by.x="rank", by.y="rankName")
temp2
oo
temp2
rankorder
merge(temp2, rankorder, by.x="rank", by.y="rankName")
merge(temp2, rankorder, by.x="rank", by.y="rankName", all.y=F)
rankorder
rankorder
ddply(rankorder, .(rankName), summarise, unique(rankName))
ddply(rankorder, .(rankName), summarise, unique(rankId))
rankorder <- ddply(rankorder, .(rankName), summarise, rankId=unique(rankId))
rankorder
merge(temp2, rankorder, by.x="rank", by.y="rankName", all.y=F)
temp3 <- merge(temp2, rankorder, by.x="rank", by.y="rankName", all.y=F)
temp3[order(temp3$rank), ]
mm <- temp3[order(temp3$taxon), ]
mm
summ <- ddply(mm, .(taxon), summarise, length(taxon))
nn <- mm[!mm$taxon %in% summ[summ$..1 == 1, "taxon"], ] # remove taxa that aren't informative (n = 1)
oo <- nn[!nn$taxon %in% summ[summ$..1 == length(temp), "taxon"], ] # remove the taxon that is in all taxa
oo
oo[order(oo$rankId),]
str(oo)
temp3$rankId <- as.numeric(temp3$rankId)
mm <- temp3[order(temp3$taxon), ]
summ <- ddply(mm, .(taxon), summarise, length(taxon))
nn <- mm[!mm$taxon %in% summ[summ$..1 == 1, "taxon"], ] # remove taxa that aren't informative (n = 1)
oo <- nn[!nn$taxon %in% summ[summ$..1 == length(temp), "taxon"], ] # remove the taxon that is in all taxa
oo[order(oo$rankId),]
temp3$rankId <- as.numeric(as.character(temp3$rankId))
mm <- temp3[order(temp3$taxon), ]
summ <- ddply(mm, .(taxon), summarise, length(taxon))
nn <- mm[!mm$taxon %in% summ[summ$..1 == 1, "taxon"], ] # remove taxa that aren't informative (n = 1)
oo <- nn[!nn$taxon %in% summ[summ$..1 == length(temp), "taxon"], ] # remove the taxon that is in all taxa
oo[order(oo$rankId),]
rankorder <- getranknames()[,-1]
rankorder <- ddply(rankorder, .(rankName), summarise, rankId=unique(rankId))
temp3 <- merge(temp2, rankorder, by.x="rank", by.y="rankName", all.y=F)
temp3
temp3$rankId <- as.numeric(as.character(temp3$rankId))
temp3
mm <- temp3[order(temp3$taxon), ]
summ <- ddply(mm, .(taxon), summarise, length(taxon))
nn <- mm[!mm$taxon %in% summ[summ$..1 == 1, "taxon"], ] # remove taxa that aren't informative (n = 1)
oo <- nn[!nn$taxon %in% summ[summ$..1 == length(temp), "taxon"], ] # remove the taxon that is in all taxa
oo[order(oo$rankId),]
mm <- temp3[order(temp3$taxon), ]
summ <- ddply(mm, .(taxon), summarise, length(taxon))
oo <- nn[!nn$taxon %in% summ[summ$..1 == length(temp), "taxon"], ] # remove the taxon that is in all taxa
oo[order(oo$rankId),] #
mm <- temp3[order(temp3$taxon), ]
mm
summ <- ddply(mm, .(taxon), summarise, length(taxon))
summ
nn[!nn$taxon %in% summ[summ$..1 == length(temp), "taxon"], ] # remove the taxon that is in all taxa
oo <- mm[!mm$taxon %in% summ[summ$..1 == length(temp), "taxon"], ] # remove the taxon that is in all taxa
oo
oo[order(oo$rankId),] #
dev_mode()
install_github('rgbif', 'schamberlain')
library(rgbif)
occurrencelist(scientificname = 'Accipiter erythronemius', coordinatestatus = TRUE, maxresults = 100, latlongdf = T)
occurrencelist(scientificname = 'Helianthus', coordinatestatus = TRUE, maxresults = 10, latlongdf = T)
occurrencelist(scientificname = 'Ursus', coordinatestatus = TRUE, maxresults = 10, latlongdf = T)
dev_mode(F)
oo[order(oo$rankId),] #
pp <- oo[order(oo$rankId),] #
split(pp, pp$rankId)
pp_ <- split(pp, pp$rankId)
length(temp)
pp
ddply(pp, .(rank), summarise, taxon=length(taxon))
ddply(pp, .(rank), summarise, taxon=length(unique(taxon)))
ddply(pp, .(rankId), summarise, taxon=length(unique(taxon)))
ddply(pp, .(rankId), summarise,
taxon=length(unique(taxon)),
target=length(unique(target)))
qq <- ddply(pp, .(rankId), summarise,
taxon=length(unique(taxon)),
target=length(unique(target)))
qq
pp
qq[qq$target - qq$taxon == 1,]
which.max(qq$target - qq$taxon == 1)
qq[qq$target - qq$taxon == 1, "rankId"]
max(qq[qq$target - qq$taxon == 1, "rankId"])
pp[pp$rankId  qq, "taxon"]
pp[pp$rankId  qq, "taxon"]
first <- max(qq[qq$target - qq$taxon == 1, "rankId"])
pp
pp[pp$rankId == first,]
qq
rr <- pp[pp$rankId == first, ]
qq[qq$rankId == first,]
qq[qq$rankId == first,"taxon"]
which(rr$taxon == qq[qq$rankId == first,"taxon"])
which(rr$taxon == qq[qq$rankId == first,"taxon"], arr.ind=T)
rr$taxon
length(rr$taxon)
unique(rr$taxon)
unique(rr$taxon)
sapply(rr$taxon, length)
sapply(unique(rr$taxon), length)
apply(unique(rr$taxon), length)
ddply(rr, .(taxon), length(taxon))
ddply(rr, .(taxon), summarise, length(taxon))
rr
qq[qq$rankId == first,"taxon"], arr.ind=T)
qq[qq$rankId == first,"taxon"]
ddply(rr, .(taxon), summarise, length(taxon))
ss <- ddply(rr, .(taxon), summarise, length(taxon))
ss[ss$..1	== qq[qq$rankId == first,"taxon"], "taxon"]
rr
rr[ss[ss$..1	== qq[qq$rankId == first,"taxon"], "taxon"], ]
ss[ss$..1	== qq[qq$rankId == first,"taxon"], "taxon"]
rr[rr$taxon == ss[ss$..1	== qq[qq$rankId == first,"taxon"], "taxon"], ]
occurrencelist(scientificname = "Accipiter erythronemius", coordinatestatus = TRUE, maxresults = 5, latlongdf = TRUE)
occurrencelist
occurrencelist
#' Occurrencelist searches for taxon concept records matching a range of filters.
#'
#' @import RCurl XML plyr httr
#' @param  scientificname scientitic name of taxon (character, see example)
#' @param  taxonconceptKey unique key for taxon (numeric)
#' @param  dataproviderkey Filter records to those provided by the supplied
#'    numeric key for a data provider. See \link{providers}. (character)
#' @param  dataresourcekey Filter records to those provided by the supplied
#'    numeric key for a data resource See \link{resources}. (character)
#' @param  institutioncode Return only records from a given institution code.
#' @param  collectioncode Return only records from a given collection code.
#' @param  catalognumber Return only records from a given catalog number.
#' @param  resourcenetworkkey  count only records which have been made available by
#'    resources identified as belonging to the network identified by the supplied numeric key.
#' @param  basisofrecordcode  return only records with the specified basis of record.
#'    Supported values are: "specimen, observation, living, germplasm, fossil, unknown".
#'    (character)
#' @param  minlatitude  return only records from locations with latitudes greater
#'    than the supplied value (southern hemisphere with negative latitudes). (numeric)
#' @param  maxlatitude  return only records from locations with latitudes lower than
#'    the supplied value (southern hemisphere with negative latitudes). (numeric)
#' @param  minlongitude  return only records from locations with longitudes greater
#'    than the supplied value (western hemisphere with negative longitudes). (numeric)
#' @param  maxlongitude  return only records from locations with longitudes lower
#'    than the supplied value (western hemisphere with negative longitudes). (numeric)
#' @param  minaltitude  return only records from altitudes greater than or equal to
#'    the supplied value. (integer)
#' @param  maxaltitude  return only records from altitudes less than or equals to
#'    the supplied value. (integer)
#' @param  mindepth  return only records from depth greater than or equal to the supplied
#'    value. (numeric 2 decimal places)
#' @param  maxdepth  return only records from depth less than or equals to the supplied
#'    value. (numeric 2 decimal places)
#' @param  cellid  identifier for a one degree cell (O - 64,799)
#' @param  centicellid  identifier for a 0.1 degree cell within a one degree cell
#' @param  typesonly  if set to "true", return only records with a type status specified.
#' @param  georeferencedonly  This option is deprecated.
#' @param  coordinatestatus  if set to "true", return only records with coordinates.
#'    If set to "false", return only records without coordinates.
#' @param  coordinateissues  if set to "true", return only records for which the portal
#'    has detected possible issues in georeferencing. If set to "false", return only
#'    records for which the portal has not detected any such issues.
#' @param  hostisocountrycode  return only records served by providers from the country
#'    identified by the supplied 2-letter ISO code.
#' @param  originisocountrycode return only records of occurrences which occurred
#'    within the country identified by the supplied 2-letter ISO code.
#' @param  originregioncode  return only records of occurrences which occurred
#'    within the region identified by the supplied 3-letter code.
#' @param  startdate  return only records occurring on or after the supplied date
#'    (format YYYY-MM-DD, e.g. 2006-11-28).
#' @param  enddate  return only records occurring on or before the supplied date
#'    (format YYYY-MM-DD, e.g. 2006-11-28).
#' @param  startyear  return only records from during or after the supplied year.
#' @param  endyear  return only records from during or before the supplied year.
#' @param  year  return only records from during the supplied year.
#' @param  month  return only records from during the supplied month (expressed as
#'    an integer in the range 1 to 12).
#' @param  day  return only records from during the supplied day of month
#'    (expressed as an integer in the range 1 to 31).
#' @param modifiedsince  return only records which have been indexed or modified
#'    in the GBIF data portal index on or after the supplied date
#'    (format YYYY-MM-DD, e.g. 2006-11-28).
#' @param  startindex  return the subset of the matching records that starts at
#'    the supplied (zero-based index).
#' @param  maxresults  max number of results (integer) (1-10000)
#' @param  format  specifies the format in which the records are to be returned,
#     one of: brief or darwin (character) default is brief.
#' @param  icon  (only when format is set to kml) specified the URL for an icon
#'    to be used for the KML Placemarks.
#' @param mode Specifies whether the response data should (as far as possible)
#'    be the raw values originally retrieved from the data resource or processed
#'    (normalised) values used within the data portal (character)
#' @param stylesheet Sets the URL of the stylesheet to be associated with the
#     response document.
#' @param latlongdf Return a data.frame of lat/long's for all occurrences (logical)
#' @param removeZeros remove records with both Lat Long zero values (logical)
#' @param writecsv If path to a file is given, a text file is written out and
#' 		a success message is returned to the console (logical)
#' @param url the base GBIF API url for the function (should be left to default)
#' @param ... optional additional curl options (debugging tools mostly)
#' @param curl If using in a loop, call getCurlHandle() first and pass
#' the returned value in here (avoids unnecessary footprint)
#' @examples \dontrun{
#' occurrencelist(scientificname = 'Accipiter erythronemius', coordinatestatus = TRUE, maxresults = 100, latlongdf = T)
#' occurrencelist(scientificname = 'Accipiter erythronemius', coordinatestatus = TRUE, maxresults = 100, latlongdf=F)
#' occurrencelist(scientificname = 'Accipiter erythronemius', coordinatestatus = TRUE, maxresults = 100, latlongdf=T, writecsv="~/myyyy.csv")
#' }
#' @export
occurrencelist <- function(scientificname = NULL, taxonconceptKey = NULL,
dataproviderkey = NULL, dataresourcekey = NULL, institutioncode = NULL,
collectioncode = NULL, catalognumber = NULL, resourcenetworkkey = NULL,
basisofrecordcode = NULL, minlatitude = NULL, maxlatitude = NULL,
minlongitude = NULL, maxlongitude = NULL, minaltitude = NULL, maxaltitude = NULL,
mindepth = NULL, maxdepth = NULL, cellid = NULL, centicellid = NULL,
typesonly = NULL, georeferencedonly = NULL, coordinatestatus = NULL,
coordinateissues = NULL, hostisocountrycode = NULL, originisocountrycode = NULL,
originregioncode = NULL, startdate = NULL, enddate = NULL, startyear = NULL,
endyear = NULL, year = NULL, month = NULL, day = NULL, modifiedsince = NULL,
startindex = NULL, maxresults = 10, format = NA, icon = NULL,
mode = NULL, stylesheet = NULL, latlongdf = FALSE, removeZeros = FALSE, writecsv = NULL,
url = "http://data.gbif.org/ws/rest/occurrence/list", ..., curl = getCurlHandle())
{
# Code based on the `gbifxmlToDataFrame` function from dismo package
# (http://cran.r-project.org/web/packages/dismo/index.html),
# by Robert Hijmans, 2012-05-31, License: GPL v3
gbifxmlToDataFrame <- function(doc, format) {
nodes <- getNodeSet(doc, "//to:TaxonOccurrence")
if (length(nodes) == 0)
return(data.frame())
if(!is.na(format) & format=="darwin"){
varNames <- c("country", "stateProvince",
"county", "locality", "decimalLatitude", "decimalLongitude",
"coordinateUncertaintyInMeters", "maximumElevationInMeters",
"minimumElevationInMeters", "maximumDepthInMeters",
"minimumDepthInMeters", "institutionCode", "collectionCode",
"catalogNumber", "basisOfRecordString", "collector",
"earliestDateCollected", "latestDateCollected", "gbifNotes")
}else{
varNames <- c("country", "decimalLatitude", "decimalLongitude",
"catalogNumber", "earliestDateCollected", "latestDateCollected" )
}
dims <- c(length(nodes), length(varNames))
ans <- as.data.frame(replicate(dims[2], rep(as.character(NA),
dims[1]), simplify = FALSE), stringsAsFactors = FALSE)
names(ans) <- varNames
for (i in seq(length = dims[1])) {
ans[i, ] <- xmlSApply(nodes[[i]], xmlValue)[varNames]
}
nodes <- getNodeSet(doc, "//to:Identification")
varNames <- c("taxonName")
dims = c(length(nodes), length(varNames))
tax = as.data.frame(replicate(dims[2], rep(as.character(NA),
dims[1]), simplify = FALSE), stringsAsFactors = FALSE)
names(tax) = varNames
for (i in seq(length = dims[1])) {
tax[i, ] = xmlSApply(nodes[[i]], xmlValue)[varNames]
}
cbind(tax, ans)
}
#End gbifxmlToDataFrame -----
args <- compact(
list(
scientificname=scientificname, dataproviderkey=dataproviderkey,
dataresourcekey=dataresourcekey, institutioncode=institutioncode,
collectioncode=collectioncode, catalognumber=catalognumber,
resourcenetworkkey=resourcenetworkkey, taxonconceptKey=taxonconceptKey,
basisofrecordcode=basisofrecordcode, coordinatestatus=coordinatestatus,
minlatitude=minlatitude, maxlatitude=maxlatitude, minlongitude=minlongitude,
maxlongitude=maxlongitude, minaltitude=minaltitude, maxaltitude=maxaltitude,
mindepth=mindepth, maxdepth=maxdepth, cellid=cellid, centicellid=centicellid,
typesonly=typesonly, coordinateissues=coordinateissues,
hostisocountrycode=hostisocountrycode, originisocountrycode=originisocountrycode,
originregioncode=originregioncode, startdate=startdate, enddate=enddate,
startyear=startyear, endyear=endyear, year=year, month=month, day=day,
modifiedsince=modifiedsince, startindex=startindex, format=format,
icon=icon, mode=mode, stylesheet=stylesheet, maxresults=maxresults
))
tt <- getForm(url, .params = args, curl = curl)
out <- xmlParse(tt)
if (latlongdf == TRUE) {
df <- gbifxmlToDataFrame(out, format)
df[, "decimalLongitude"] <- as.numeric(df[, "decimalLongitude"])
df[, "decimalLatitude"] <- as.numeric(df[, "decimalLatitude"])
i <- df[, "decimalLongitude"] == 0 & df[, "decimalLatitude"] == 0
if (removeZeros) {
df <- df[!i, ]
} else
{
df[i, "decimalLatitude"] <- NA
df[i, "decimalLongitude"] <- NA
}
if(!is.null(writecsv)){
write.csv(df, file=writecsv)
message("Success! CSV file written")
}
df
} else { out }
}
req(list("RCurl", "XML", "plyr", "httr"))
occurrencelist(scientificname = "Accipiter erythronemius", coordinatestatus = TRUE, maxresults = 5, latlongdf = TRUE)
library(roxygen2)
roxygenize("/Users/ScottMac/github/schamberlain/rgbif")
rr[rr$taxon == ss[ss$..1	== qq[qq$rankId == first,"taxon"], "taxon"], ]
paste("(", "A,", "(C,D)", ");", sep="")
read.tree(text=tree)
library(ape)
read.tree(text=tree)
tree <- paste("(", "A,", "(C,D)", ");", sep="")
read.tree(text=tree)
plot(read.tree(text=tree))
rr[rr$taxon == ss[ss$..1	== qq[qq$rankId == first,"taxon"], "taxon"], ]
rr[rr$taxon == ss[ss$..1	== qq[qq$rankId == first,"taxon"], "taxon"], "target"]
as.character(rr[rr$taxon == ss[ss$..1	== qq[qq$rankId == first,"taxon"], "taxon"], "target"])
pair <- as.character(rr[rr$taxon == ss[ss$..1	== qq[qq$rankId == first,"taxon"], "taxon"], "target"])
mytaxa <- c("Pan troglodytes", "Drosophila melanogaster", "Homo sapiens")
m
mytaxa
mytaxa[mytaxa %in% pair]
mytaxa[!mytaxa %in% pair]
rem <- mytaxa[!mytaxa %in% pair]
paste(pair, collapse=",")
clade1 <- as.character(rr[rr$taxon == ss[ss$..1	== qq[qq$rankId == first,"taxon"], "taxon"], "target"])
rem <- mytaxa[!mytaxa %in% clade1]
paste(clade1, collapse=",")
paste("(", "A,", "(C,D)", ");", sep="")
paste("(", "Drosophila melanogaster,", "(Homo sapiens,Pan troglodytes)", ");", sep="")
tree <-
paste("(", "Drosophila melanogaster,", "(Homo sapiens,Pan troglodytes)", ");", sep="")
plot(read.tree(text=tree))
plot(read.tree(text=tree), no.margin=T)
str_replace_all(tree, "\\s", "_")
tree <- str_replace_all(tree, "\\s", "_")
plot(read.tree(text=tree), no.margin=T)
paset("(", paste(clade1, collapse=","), ")", sep="")
paste("(", paste(clade1, collapse=","), ")", sep="")
paste(rem,",",sep="")
paste("(", paste(rem,",",sep=""), paste("(", paste(clade1, collapse=","), ")", sep=""), ");", sep="")
tree <- paste("(", paste(rem,",",sep=""), paste("(", paste(clade1, collapse=","), ")", sep=""), ");", sep="")
tree <- str_replace_all(tree, "\\s", "_")
plot(read.tree(text=tree), no.margin=T)
